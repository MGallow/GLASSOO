// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// CV_ADMMsigmac
List CV_ADMMsigmac(const arma::mat& X, const arma::colvec& lam, const arma::colvec& alpha, bool diagonal, double rho, const double mu, const double tau1, const double tau2, std::string crit, const double tol1, const double tol2, int maxit, int adjmaxit, int K, std::string start, bool quiet);
RcppExport SEXP _GLASSO_CV_ADMMsigmac(SEXP XSEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP diagonalSEXP, SEXP rhoSEXP, SEXP muSEXP, SEXP tau1SEXP, SEXP tau2SEXP, SEXP critSEXP, SEXP tol1SEXP, SEXP tol2SEXP, SEXP maxitSEXP, SEXP adjmaxitSEXP, SEXP KSEXP, SEXP startSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type diagonal(diagonalSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< std::string >::type crit(critSEXP);
    Rcpp::traits::input_parameter< const double >::type tol1(tol1SEXP);
    Rcpp::traits::input_parameter< const double >::type tol2(tol2SEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type adjmaxit(adjmaxitSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< std::string >::type start(startSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(CV_ADMMsigmac(X, lam, alpha, diagonal, rho, mu, tau1, tau2, crit, tol1, tol2, maxit, adjmaxit, K, start, quiet));
    return rcpp_result_gen;
END_RCPP
}
// CV_RIDGEsigmac
List CV_RIDGEsigmac(const arma::mat& X, const arma::colvec& lam, int K, bool quiet);
RcppExport SEXP _GLASSO_CV_RIDGEsigmac(SEXP XSEXP, SEXP lamSEXP, SEXP KSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(CV_RIDGEsigmac(X, lam, K, quiet));
    return rcpp_result_gen;
END_RCPP
}
// CVP_ADMMsigmac
arma::mat CVP_ADMMsigmac(const arma::mat& S_train, const arma::mat& S_valid, const arma::colvec& lam, const arma::colvec& alpha, bool diagonal, double rho, const double mu, const double tau1, const double tau2, std::string crit, const double tol1, const double tol2, int maxit, int adjmaxit, std::string start, bool quiet);
RcppExport SEXP _GLASSO_CVP_ADMMsigmac(SEXP S_trainSEXP, SEXP S_validSEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP diagonalSEXP, SEXP rhoSEXP, SEXP muSEXP, SEXP tau1SEXP, SEXP tau2SEXP, SEXP critSEXP, SEXP tol1SEXP, SEXP tol2SEXP, SEXP maxitSEXP, SEXP adjmaxitSEXP, SEXP startSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S_train(S_trainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S_valid(S_validSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type diagonal(diagonalSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< std::string >::type crit(critSEXP);
    Rcpp::traits::input_parameter< const double >::type tol1(tol1SEXP);
    Rcpp::traits::input_parameter< const double >::type tol2(tol2SEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type adjmaxit(adjmaxitSEXP);
    Rcpp::traits::input_parameter< std::string >::type start(startSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(CVP_ADMMsigmac(S_train, S_valid, lam, alpha, diagonal, rho, mu, tau1, tau2, crit, tol1, tol2, maxit, adjmaxit, start, quiet));
    return rcpp_result_gen;
END_RCPP
}
// CVP_RIDGEsigmac
arma::mat CVP_RIDGEsigmac(const arma::mat& S_train, const arma::mat& S_valid, const arma::colvec& lam, bool quiet);
RcppExport SEXP _GLASSO_CVP_RIDGEsigmac(SEXP S_trainSEXP, SEXP S_validSEXP, SEXP lamSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S_train(S_trainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S_valid(S_validSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(CVP_RIDGEsigmac(S_train, S_valid, lam, quiet));
    return rcpp_result_gen;
END_RCPP
}
// lassoc
List lassoc(const arma::mat& X, const arma::mat& Y, const arma::mat& ind, const double lam, std::string crit, const double tol, const double maxit);
RcppExport SEXP _GLASSO_lassoc(SEXP XSEXP, SEXP YSEXP, SEXP indSEXP, SEXP lamSEXP, SEXP critSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< std::string >::type crit(critSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const double >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(lassoc(X, Y, ind, lam, crit, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// RIDGEsigmac
arma::mat RIDGEsigmac(const arma::mat& S, double lam);
RcppExport SEXP _GLASSO_RIDGEsigmac(SEXP SSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(RIDGEsigmac(S, lam));
    return rcpp_result_gen;
END_RCPP
}
// ADMMsigmac
List ADMMsigmac(const arma::mat& S, const arma::mat& initOmega, const arma::mat& initZ2, const arma::mat& initY, const double lam, const double alpha, bool diagonal, double rho, const double mu, const double tau1, const double tau2, std::string crit, const double tol1, const double tol2, const int maxit);
RcppExport SEXP _GLASSO_ADMMsigmac(SEXP SSEXP, SEXP initOmegaSEXP, SEXP initZ2SEXP, SEXP initYSEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP diagonalSEXP, SEXP rhoSEXP, SEXP muSEXP, SEXP tau1SEXP, SEXP tau2SEXP, SEXP critSEXP, SEXP tol1SEXP, SEXP tol2SEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type initOmega(initOmegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type initZ2(initZ2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type initY(initYSEXP);
    Rcpp::traits::input_parameter< const double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type diagonal(diagonalSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< std::string >::type crit(critSEXP);
    Rcpp::traits::input_parameter< const double >::type tol1(tol1SEXP);
    Rcpp::traits::input_parameter< const double >::type tol2(tol2SEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(ADMMsigmac(S, initOmega, initZ2, initY, lam, alpha, diagonal, rho, mu, tau1, tau2, crit, tol1, tol2, maxit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GLASSO_CV_ADMMsigmac", (DL_FUNC) &_GLASSO_CV_ADMMsigmac, 16},
    {"_GLASSO_CV_RIDGEsigmac", (DL_FUNC) &_GLASSO_CV_RIDGEsigmac, 4},
    {"_GLASSO_CVP_ADMMsigmac", (DL_FUNC) &_GLASSO_CVP_ADMMsigmac, 16},
    {"_GLASSO_CVP_RIDGEsigmac", (DL_FUNC) &_GLASSO_CVP_RIDGEsigmac, 4},
    {"_GLASSO_lassoc", (DL_FUNC) &_GLASSO_lassoc, 7},
    {"_GLASSO_RIDGEsigmac", (DL_FUNC) &_GLASSO_RIDGEsigmac, 2},
    {"_GLASSO_ADMMsigmac", (DL_FUNC) &_GLASSO_ADMMsigmac, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_GLASSO(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
